import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;

import java.io.File;
import java.util.List;
import java.util.Scanner;

public class RecommenderSystem {
    public static void main(String[] args) throws Exception {
        DataModel model = new FileDataModel(new File("data.csv"));
        UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
        UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);
        Recommender recommender = new GenericUserBasedRecommender(model, neighborhood, similarity);

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter user ID: ");
        long userId = scanner.nextLong();

        System.out.print("How many recommendations? ");
        int numRec = scanner.nextInt();

        List<RecommendedItem> recommendations = recommender.recommend(userId, numRec);

        if (recommendations.isEmpty()) {
            System.out.println("No recommendations for user " + userId);
        } else {
            System.out.println("Recommendations for user " + userId + ":");
            for (RecommendedItem r : recommendations) {
                System.out.println("Item " + r.getItemID() + " (score: " + r.getValue() + ")");
            }
        }
    }
}
s